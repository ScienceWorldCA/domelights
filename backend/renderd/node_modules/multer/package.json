{
  "name": "multer",
  "version": "0.1.4",
  "description": "Connect middleware for handling multipart/form-data",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/expressjs/multer.git",
    "homepage": "https://github.com/expressjs/multer"
  },
  "bugs": {
    "url": "https://github.com/expressjs/multer/issues"
  },
  "scripts": {
    "test": "make test"
  },
  "keywords": [
    "form",
    "post",
    "multipart",
    "form-data",
    "connect",
    "express",
    "middleware"
  ],
  "dependencies": {
    "busboy": "^0.2.7",
    "mkdirp": "~0.3.5",
    "qs": "^1.2.1"
  },
  "devDependencies": {
    "chai": "^1.9.1",
    "co": "^3.0.6",
    "express": "*",
    "mocha": "*",
    "rimraf": "^2.2.8",
    "supertest": "^0.13.0"
  },
  "author": {
    "name": "Hage Yaapa",
    "email": "captain@hacksparrow.com",
    "url": "http://www.hacksparrow.com"
  },
  "license": "MIT",
  "readme": "# Multer [![Build Status](https://travis-ci.org/expressjs/multer.svg?branch=master)](https://travis-ci.org/expressjs/multer) [![NPM version](https://badge.fury.io/js/multer.svg)](https://badge.fury.io/js/multer)\n\nMulter is a node.js middleware for handling `multipart/form-data`.\n\nIt is written on top of [busboy](https://github.com/mscdex/busboy) for maximum efficiency.\n\n## API\n\n#### Installation\n\n`$ npm install multer`\n\n#### Usage\n\n```js\nvar express = require('express')\nvar multer  = require('multer')\n\nvar app = express()\napp.use(multer({ dest: './uploads/'}))\n```\n\nYou can access the fields and files in the `request` object:\n\n```js\nconsole.log(req.body)\nconsole.log(req.files)\n```\n\n**IMPORTANT**: Multer will not process any form which is not `multipart/form-data` submitted via the `POST` or `PUT` methods.\n\n## Multer file object\n\nA multer file object is a JSON object with the following properties.\n\n1. `fieldname` - Field name specified in the form\n2. `originalname` - Name of the file on the user's computer\n3. `name` - Renamed file name\n4. `encoding` - Encoding type of the file\n5. `mimetype` - Mime type of the file\n6. `path` - Location of the uploaded file\n7. `extension` - Extension of the file\n8. `size` - Size of the file in bytes\n9. `truncated` - If the file was truncated due to size limitation\n\n## Options\n\nMulter accepts an options object, the most basic of which is the `dest` property, which tells Multer where to upload the files. In case you omit the options object, the file will be renamed and uploaded to the temporary directory of the system.\n\nBy the default, Multer will rename the files so as to avoid name conflicts. The renaming function can be customized according to your needs.\n\nThe following are the options that can be passed to Multer.\n\n* `dest`\n* `limits`\n* `includeEmptyFields`\n* `rename(fieldname, filename)`\n* `onFileUploadStart(file)`\n* `onFileUploadData(file, data)`\n* `onFileUploadComplete(file)`\n* `onParseStart()`\n* `onParseEnd(req, next)`\n* `onError()`\n* `onFileSizeLimit(file)`\n* `onFilesLimit()`\n* `onFieldsLimit()`\n* `onPartsLimit()`\n\nApart from these, Multer also supports more advanced [busboy options](https://github.com/mscdex/busboy#busboy-methods) like `highWaterMark`, `fileHwm`, and `defCharset`.\n\nIn an average web app, only `dest` and `rename` might be required, and configured as shown in the example.\n\n```js\napp.use(multer({\n  dest: './uploads/',\n  rename: function (fieldname, filename) {\n    return filename.replace(/\\W+/g, '-').toLowerCase() + Date.now()\n  }\n}))\n```\n\nThe details of the properties of the options object is explained in the following sections.\n\n### dest\n\nThe destination directory for the uploaded files.\n\n`dest: './uploads/'`\n\n### limits\n\nAn object specifying the size limits of the following optional properties. This object is passed to busboy directly, and the details of properties can be found on [busboy's page](https://github.com/mscdex/busboy#busboy-methods)\n\n* `fieldNameSize` - integer - Max field name size (Default: 100 bytes)\n* `fieldSize` - integer - Max field value size (Default: 1MB)\n* `fields` - integer - Max number of non-file fields (Default: Infinity)\n* `fileSize` - integer - For multipart forms, the max file size (in bytes) (Default: Infinity)\n* `files` - integer - For multipart forms, the max number of file fields (Default: Infinity)\n* `parts` - integer - For multipart forms, the max number of parts (fields + files) (Default: Infinity)\n* `headerPairs` - integer - For multipart forms, the max number of header key=>value pairs to parse Default: 2000 (same as node's http).\n\n```js\nlimits: {\n  fieldNameSize: 100,\n  files: 2,\n  fields: 5\n}\n```\n\nSpecifying the limits can help protect your site against denial of service (DoS) attacks.\n\n### includeEmptyFields\n\nA Boolean value to specify whether empty submitted values should be processed and applied to `req.body`; defaults to `false`;\n\n```js\nincludeEmptyFields: true\n```\n\n### rename(fieldname, filename)\n\nFunction to rename the uploaded files. Whatever the function returns will become the new name of the uploaded file (extension is not included). The `fieldname` and `filename` of the file will be available in this function, use them if you need to.\n\n```js\nrename: function (fieldname, filename) {\n  return fieldname + filename + Date.now()\n}\n```\n\n### onFileUploadStart(file)\n\nEvent handler triggered when a file starts to be uploaded. A file object with the following properties are available to this function: `fieldname`, `originalname`, `name`, `encoding`, `mimetype`, `path`, `extension`.\n\n```js\nonFileUploadStart: function (file) {\n  console.log(file.fieldname + ' is starting ...')\n}\n```\n\nYou can even stop a file from being uploaded - just return `false` from the event handler. The file won't be processed or reach the file system.\n\n```js\nonFileUploadStart: function (file) {\n  if (file.originalname == 'virus.exe') return false;\n}\n```\n\n### onFileUploadData(file, data)\n\nEvent handler triggered when a chunk of buffer is received. A buffer object along with a file object is available to the function.\n\n```js\nonFileUploadData: function (file, data) {\n  console.log(data.length + ' of ' + file.fieldname + ' arrived')\n}\n```\n\n### onFileUploadComplete(file)\n\nEvent handler trigger when a file is completely uploaded. A file object is available to the function.\n\n```js\nonFileUploadComplete: function (file) {\n  console.log(file.fieldname + ' uploaded to  ' + file.path)\n}\n```\n\n### onParseStart()\n\nEvent handler triggered when the form parsing starts.\n\n```js\nonParseStart: function () {\n  console.log('Form parsing started at: ', new Date())\n}\n```\n\n### onParseEnd(req, next)\n\nEvent handler triggered when the form parsing completes. The `request` object and the `next` objects are are passed to the function.\n\n```js\nonParseEnd: function (req, next) {\n  console.log('Form parsing completed at: ', new Date());\n\n  // usage example: custom body parse\n  req.body = require('qs').parse(req.body);\n\n  // call the next middleware\n  next();\n}\n```\n\n**Note**: If you have created a `onParseEnd` event listener, you must manually call the `next()` function, else the request will be left hanging.\n\n### onError()\n\nEvent handler for any errors encountering while processing the form. The `error` object and the `next` object is available to the function. If you are handling errors yourself, make sure to terminate the request or call the `next()` function, else the request will be left hanging.\n\n```js\nonError: function (error, next) {\n  console.log(error)\n  next(error)\n}\n```\n\n### onFileSizeLimit()\n\nEvent handler triggered when a file size exceeds the specification in the `limit` object. No more files will be parsed after the limit is reached.\n\n```js\nonFileSizeLimit: function (file) {\n  console.log('Failed: ', file.originalname)\n  fs.unlink('./' + file.path) // delete the partially written file\n}\n```\n\n### onFilesLimit()\n\nEvent handler triggered when the number of files exceed the specification in the `limit` object. No more files will be parsed after the limit is reached.\n\n```js\nonFilesLimit: function () {\n  console.log('Crossed file limit!')\n}\n```\n\n### onFieldsLimit()\n\nEvent handler triggered when the number of fields exceed the specification in the `limit` object. No more fields will be parsed after the limit is reached.\n\n```js\nonFieldsLimit: function () {\n  console.log('Crossed fields limit!')\n}\n```\n\n### onPartsLimit()\n\nEvent handler triggered when the number of parts exceed the specification in the `limit` object. No more files or fields will be parsed after the limit is reached.\n\n```js\nonPartsLimit: function () {\n  console.log('Crossed parts limit!')\n}\n```\n\n## License (MIT)\n\nCopyright (c) 2014 Hage Yaapa <[http://www.hacksparrow.com](http://www.hacksparrow.com)>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "multer@0.1.4",
  "dist": {
    "shasum": "1784e8df74348216b6710861bc7e8641577ac8af"
  },
  "_from": "multer@0.x",
  "_resolved": "https://registry.npmjs.org/multer/-/multer-0.1.4.tgz"
}
